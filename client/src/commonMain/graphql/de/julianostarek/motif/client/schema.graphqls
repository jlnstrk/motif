type Collection {
  id: UUID!

  title: String!

  createdAt: DateTime!

  updatedAt: DateTime!

  ownerId: UUID!

  motifs(page: ConnectionParams): MotifConnection!
}

type CollectionConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [CollectionEdge!]!

  """
  A list of nodes.
  """
  nodes: [Collection!]!
}

"""
An edge in a connection.
"""
type CollectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String!

  """
  The item at the end of the edge
  """
  node: Collection!
}

type Comment {
  id: Int!

  text: String!

  offset: Int

  createdAt: DateTime!

  authorId: UUID!

  childCommentsCount: Int!

  childComments(page: ConnectionParams): CommentConnection!

  author: Profile!

  motif: Motif!

  parentComment: Comment

  liked: Boolean!

  likesCount: Int!

  likes(page: ConnectionParams): ProfileConnection!
}

type CommentConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [CommentEdge!]!

  """
  A list of nodes.
  """
  nodes: [Comment!]!
}

"""
An edge in a connection.
"""
type CommentEdge {
  """
  A cursor for use in pagination
  """
  cursor: String!

  """
  The item at the end of the edge
  """
  node: Comment!
}

input ConnectionParams {
  after: String

  before: String

  first: Int

  last: Int
}

input CreateCollection {
  title: String!

  description: String
}

input CreateComment {
  text: String!

  offset: Int
}

input CreateMotif {
  isrc: String!

  serviceIds: [ServiceIdInput!]!

  offset: Int!
}

"""
Implement the DateTime<Utc> scalar

The input/output is a string in RFC3339 format.
"""
scalar DateTime

type Metadata {
  name: String!

  artist: String!

  coverArtUrl: String
}

type Motif {
  id: Int!

  isrc: String!

  offset: Int!

  createdAt: DateTime!

  creatorId: UUID!

  metadata: Metadata

  serviceIds: [ServiceId!]!

  creator: Profile!

  listened: Boolean!

  listenersCount: Int!

  listeners(page: ConnectionParams): ProfileConnection!

  commentsCount: Int!

  comments(page: ConnectionParams): CommentConnection!

  liked: Boolean!

  likesCount: Int!

  likes(page: ConnectionParams): ProfileConnection!
}

type MotifConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [MotifEdge!]!

  """
  A list of nodes.
  """
  nodes: [Motif!]!
}

"""
An edge in a connection.
"""
type MotifEdge {
  """
  A cursor for use in pagination
  """
  cursor: String!

  """
  The item at the end of the edge
  """
  node: Motif!
}

type MotifsByCreatedAtConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [MotifsByCreatedAtEdge!]!

  """
  A list of nodes.
  """
  nodes: [Motif!]!
}

"""
An edge in a connection.
"""
type MotifsByCreatedAtEdge {
  """
  A cursor for use in pagination
  """
  cursor: String!

  """
  The item at the end of the edge
  """
  node: Motif!
}

type Mutation {
  collectionCreate(args: CreateCollection!): Collection!

  collectionDeleteById(collectionId: UUID!): Boolean!

  collectionAddMotif(collectionId: UUID!, motifId: Int!): Boolean!

  collectionRemoveMotif(collectionId: UUID!, motifId: Int!): Boolean!

  motifCommentCreate(motifId: Int!, args: CreateComment!): Comment!

  motifCommentCreateSub(parentCommentId: Int!, args: CreateComment!): Comment!

  commentDeleteById(commentId: Int!): Boolean!

  motifLikeById(motifId: Int!): Boolean!

  commentLikeById(commentId: Int!): Boolean!

  motifUnlikeById(motifId: Int!): Boolean!

  commentUnlikeById(commentId: Int!): Boolean!

  motifCreate(args: CreateMotif!): Motif!

  motifDeleteById(motifId: Int!): Boolean!

  motifListenById(motifId: Int!): Boolean!

  profileMeUpdate(update: ProfileUpdate!): Profile!

  profileFollowById(profileId: UUID!): Boolean!

  profileUnfollowById(profileId: UUID!): Boolean!
}

"""
Information about pagination in a connection
"""
type PageInfo {
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Profile {
  id: UUID!

  displayName: String!

  username: String!

  photoUrl: String

  biography: String

  followers(page: ConnectionParams): ProfileConnection!

  followersCount: Int!

  follows: Boolean!

  following(page: ConnectionParams): ProfileConnection!

  followingCount: Int!

  feed: [Motif!]!

  motifs(page: ConnectionParams): MotifsByCreatedAtConnection!

  collections(page: ConnectionParams): CollectionConnection!
}

type ProfileConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [ProfileEdge!]!

  """
  A list of nodes.
  """
  nodes: [Profile!]!
}

"""
An edge in a connection.
"""
type ProfileEdge {
  """
  A cursor for use in pagination
  """
  cursor: String!

  """
  The item at the end of the edge
  """
  node: Profile!
}

input ProfileUpdate {
  displayName: String

  username: String

  photoUrl: String

  biography: String
}

type Query {
  feedMotifs(page: ConnectionParams): MotifConnection!

  feedProfiles(page: ConnectionParams): ProfileConnection!

  collectionById(collectionId: UUID!): Collection!

  commentById(commentId: Int!): Comment!

  motifById(motifId: Int!): Motif!

  profileMe: Profile!

  profileById(profileId: UUID!): Profile

  profileByUsername(username: String!): Profile

  profileSearch(query: String!, page: ConnectionParams): ProfileConnection!

  profileIsUsernameAvailable(username: String!): Boolean!
}

enum Service {
  SPOTIFY

  APPLE_MUSIC
}

type ServiceId {
  service: Service!

  id: String!
}

input ServiceIdInput {
  service: Service!

  id: String!
}

type Subscription {
  motifLiked(motifId: Int!): Profile!

  motifCreated: Motif!

  motifDeleted: Int!

  motifListened(motifId: Int!): Profile!

  profileMe: Profile!

  profileMeNewFollower: Profile!
}

"""
A UUID is a unique 128-bit number, stored as 16 octets. UUIDs are parsed as
Strings within GraphQL. UUIDs are used to assign unique identifiers to
entities without requiring a central allocating authority.

# References

* [Wikipedia: Universally Unique Identifier](http://en.wikipedia.org/wiki/Universally_unique_identifier)
* [RFC4122: A Universally Unique IDentifier (UUID) URN Namespace](http://tools.ietf.org/html/rfc4122)
"""
scalar UUID

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
