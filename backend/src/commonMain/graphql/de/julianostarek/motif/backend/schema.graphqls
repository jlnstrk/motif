scalar Timestamp

scalar Long

type Query {
  _empty: String

  myFollowers: [Profile!]!

  myFollowing: [Profile!]!

  theirProfile(profileId: String!): Profile

  theirFollowers(profileId: String!): [Profile!]!

  theirFollowing(profileId: String!): [Profile!]!

  myCollections: [Collection!]!

  theirCollections(profileId: String!): [Collection!]!

  collection(collectionId: String!): Collection

  mySession: Session

  transferSession(newOwnerId: String!): Boolean

  vote(trackId: Long!): Boolean

  unvote(trackId: Long!): Boolean

  motifsFeed: [Motif!]!
}

type Mutation {
  _empty: String

  followProfile(profileId: String!): Boolean!

  unfollowProfile(profileId: String!): Boolean!

  createCollection(create: CreateCollection!): Collection

  updateCollection(collectionId: String!, update: UpdateCollection!): Collection

  deleteCollection(collectionId: String!): Boolean!

  addCollectionAlbum(collectionId: String!, add: AddCollectionAlbum!): CollectionAlbum

  addCollectionArtist(collectionId: String!, add: AddCollectionArtist!): CollectionArtist

  addCollectionTrack(collectionId: String!, add: AddCollectionTrack!): CollectionTrack

  removeCollectionAlbum(collectionId: String!, spotifyAlbumId: String!): Boolean!

  removeCollectionArtist(collectionId: String!, spotifyArtistId: String!): Boolean!

  removeCollectionTrack(collectionId: String!, spotifyTrackId: String!): Boolean!

  createMotif(create: CreateMotif!): Motif!

  deleteMotif(motifId: Long!): Boolean!
}

type Subscription {
  _empty: String

  motifCreated: Motif!

  motifDeleted: Long!
}

type Profile {
  id: String!

  displayName: String!

  username: String!

  photoUrl: String

  biography: String

  followersCount: Int

  followingCount: Int
}

type Collection {
  id: String!

  title: String!

  description: String

  photoUrl: String

  createdAt: Timestamp!

  updatedAt: Timestamp!

  owners: [Profile!]!

  albums: [CollectionAlbum!]!

  artists: [CollectionArtist!]!

  tracks: [CollectionTrack!]!
}

type CollectionAlbum {
  spotifyAlbumId: String!

  added: Timestamp!
}

type CollectionArtist {
  spotifyArtistId: String!

  added: Timestamp!
}

type CollectionTrack {
  spotifyTrackId: String!

  added: Timestamp!
}

input CreateCollection {
  title: String!

  description: String

  photoUrl: String
}

input UpdateCollection {
  title: String

  description: String

  photoUrl: String
}

input AddCollectionAlbum {
  spotifyAlbumId: String!
}

input AddCollectionArtist {
  spotifyArtistId: String!
}

input AddCollectionTrack {
  spotifyTrackId: String!
}

type Session {
  id: String

  title: String

  owner: Profile

  members: [Profile]

  tracks: [SessionTrack]
}

type SessionTrack {
  id: Long

  spotifyTrackId: String

  index: Int

  voters: [Profile]

  votersCount: Int
}

type Motif {
  id: Long!

  spotifyTrackId: String!

  offset: Int!

  createdAt: Timestamp!

  creatorId: String!

  creator: Profile!

  listened: Boolean!

  listeners: [Profile!]!
}

input CreateMotif {
  spotifyTrackId: String!

  offset: Int!
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
